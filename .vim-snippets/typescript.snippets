snippet fc
// Libraries
import React, {FunctionComponent} from 'react'

interface Props {
  ${0}
}

const ${1:MyComponent}: FunctionComponent<Props> = ({}) => {
  return null
}

export default $1
endsnippet

snippet reduxfc
// Libraries
import React, {FunctionComponent} from 'react'
import {connect} from 'react-redux'

// Types
import {AppState} from 'src/types'

interface StateProps {
}

interface DispatchProps {
}

interface OwnProps {
}

type Props = StateProps & DispatchProps & OwnProps

const ${1:MyComponent}: FunctionComponent<Props> = ({}) => {
  return null
}

const mstp = (state: AppState) => {
  ${0}

  return {}
}

const mdtp = {
}

export default connect<StateProps, DispatchProps, OwnProps>(
  mstp,
  mdtp
)($1)
endsnippet

snippet reduxpure
// Libraries
import React, {PureComponent} from 'react'
import {connect} from 'react-redux'

// Types
import {AppState} from 'src/types/v2'

interface StateProps {
}

interface DispatchProps {
}

interface OwnProps {}

type Props = StateProps & DispatchProps & OwnProps

interface State {}

class ${1:MyClass} extends PureComponent<Props, State> {
  public state: State = {}

  public render() {
    return null${0}
  }
}

const mstp = (state: AppState) => {
  ${0}

  return {}
}

const mdtp = {}

export default connect<StateProps, DispatchProps, OwnProps>(
  mstp,
  mdtp
)($1)
endsnippet

snippet pure
import React, {PureComponent} from 'react'

interface Props {}

interface State {}

class ${1:MyClass} extends PureComponent<Props, State> {
  public render() {
    return null${0}
  }
}

export default $1
endsnippet

snippet test
import React from 'react'
import {shallow} from 'enzyme'

import ${1:MyComponent} from './$1'

describe('$1', () => {
  test('it renders', () => {
    const props = {}
    const wrapper = shallow(<$1 {...props} />)
$0
    expect(wrapper).toBeTruthy()
  })
})
endsnippet

snippet testdeep
import React from 'react'
import {mount} from 'enzyme'

import ${1:MyComponent} from './$1'

describe('$1', () => {
  test('it renders', () => {
    const props = {}
    const wrapper = mount(<$1 {...props} />)
$0
    expect(wrapper).toBeTruthy()
  })
})
endsnippet
